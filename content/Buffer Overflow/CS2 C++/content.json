{
    "name": "Buffer Overflow",
    "variant": "CS2 C++",
    "sections": [
        {
            "header": "Background",
            "units": [
                {
                    "type": "subheader",
                    "text": "Summary:"
                },
                {
                    "type": "paragraph",
                    "text": "Buffer overflow occurs when data is input or written beyond the allocated bounds of an buffer, array, or other object causing a program crash or a vulnerability that hackers might exploit."
                },
                {
                    "type": "subheader",
                    "text": "Description:"
                },
                {
                    "type": "paragraph",
                    "text": "A buffer overflow occurs when data is written beyond the boundaries of a fixed length buffer overwriting adjacent memory locations which may include other buffers, variables and program flow data. Considered the \"nuclear bomb\" of the software industry, the buffer overflow is one of the most persistent security vulnerabilities and frequently used attacks. A malicious user can overwrite a buffer and change important data nearby or, as in the example below, change the runtime stack and force control to pass to malicious code."
                },
                {
                    "type": "paragraph",
                    "text": "<a href = https://www.youtube.com/watch?v=5Seq4pv4nvA> https://www.youtube.com/watch?v=5Seq4pv4nvA</a>"
                },
                {
                    "type": "paragraph",
                    "text": "<small><small>Video by Lydia Spurrier and Miya Dubler.</small></small>"
                },
                {
                    "type": "subheader",
                    "text": "Risk: How Can It Happen?"
                },
                {
                    "type": "paragraph",
                    "text": "Buffer oveflow problems are most prevalent in languages such as C/C++ which do not have inherent bounds checking and pointer control, but can happen in other languages as well."
                },
                {
                    "type": "subheader",
                    "text": "Real-world Example:"
                },
                {
                    "type": "paragraph",
                    "text": "In July 2012, multiple buffer overflow vulnerabilities were found in the firmware used for VeriFone point-of-sale devices. By exploiting these vulnerabilities, hackers were able to control the terminal and log information input by customers, such as PIN numbers and the magnetic stripe data of a bank card.<br><small><small><small> Lucian Constantin. \"Artema Hybrid Point-of-sale Devices Can Be Hacked Remotely, Researchers Say\", PCWorld, July 12, 2012<a href = http://www.pcworld.com/article/259152/artema_hybrid_pointofsale_devices_can_be_hacked_remotely_researchers_say.html > http://www.pcworld.com/article/259152/artema_hybrid_pointofsale_devices_can_be_hacked_remotely_researchers_say.html</a></small></small></small>"
                },
                {
                    "type": "image",
                    "src": "http://cis1.towson.edu/~cssecinj/wp-content/uploads/cs2/buffer-overflow.jpg",
                    "alt": "buffer overflow",
                    "width": 471,
                    "height": 376,
                    "float": null
                },
                {
                    "type": "subheader",
                    "text": "Example in Code:"
                },
                {
                    "type": "codeblock",
                    "code": "./exampleInCode.cpp"
                },
                {
                    "type": "paragraph",
                    "text": "This program increments the loop counter past the last element of the array. When the assignment statement tries to store a value in vals[10], a buffer overflow occurs. The results are unpredictable, depending on the compiler and the specific nature of the overflow. Some overflows will not cause any apparent problems, while others will cause the program to crash. However, all buffer overflows are undefined behavior and must be remedied. Some languages have tools that will catch buffer overflows before they can become vulnerabilities: Java's automatic array bound checking facilities will trigger an ArrayIndexOutOfBoundsException when a buffer overflow occurs."
                },
                {
                    "type": "paragraph",
                    "text": "Because buffer overflow is a common problem in C/C++, it is recommended to declare any variable that is used to represent the size of an object, including integer values used as sizes, indices, loop counters, and lengths, as <i>size_t</i>. The <i>size_t</i> type is an unsigned integer type."
                },
                {
                    "type": "subheader",
                    "text": "Answer the following questions:"
                },
                {
                    "type": "question",
                    "id": "bf",
                    "prompt": "A buffer overflow can write over adjacent data such as:",
                    "ignored": false,
                    "mode": "checkbox",
                    "choices": [
                        {
                            "id": "variables",
                            "text": "Variables",
                            "ans": true
                        },
                        {
                            "id": "program",
                            "text": "Program flow instructions",
                            "ans": true
                        },
                        {
                            "id": "other",
                            "text": "Other buffers",
                            "ans": true
                        }
                    ]
                },
                {
                    "type": "question",
                    "id": "unchecked",
                    "prompt": "An unchecked buffer overflow may cause:",
                    "ignored": false,
                    "mode": "checkbox",
                    "choices": [
                        {
                            "id": "data",
                            "text": "Data to be corrupted",
                            "ans": true
                        },
                        {
                            "id": "crash",
                            "text": "A program crash",
                            "ans": true
                        },
                        {
                            "id": "correct",
                            "text": "The program to correct itself",
                            "ans": false
                        },
                        {
                            "id": "execution",
                            "text": "The execution of malicious code",
                            "ans": true
                        },
                        {
                            "id": "unexpected",
                            "text": "Unexpected behavior",
                            "ans": true
                        }
                    ]
                }
            ]
        },
        {
            "header": "Code Responsibly",
            "units": [
                {
                    "type": "subheader",
                    "text": "How Can I Avoid Buffer Overflow?"
                },
                {
                    "type": "list",
                    "items": [
                        "<i><strong>Mind your Indices!</strong></i> <br>&nbsp&nbsp&nbsp&nbsp -Validate your input. Always check values that are input as an array index.<br> &nbsp&nbsp&nbsp&nbsp -Check your loops! Especially watch the limit, beware of off-by-one errors.<br> &nbsp&nbsp&nbsp&nbsp -Check any methods that may modify an array index.",
                        "<i><strong>Make sure you have enough space:</strong></i> Before copying data to a fixed size block, make sure it is large enough to hold the new data. Do not copy more data than your available space can hold.",
                        "<i><strong>Validate indices:</strong></i> If you have an integer variable, declare it as an unsigned int and verify that it is within the proper bounds before you use it as an index to an array. This validation is particularly important for any values that might have come from untrusted sources such as user input, network data, or untrusted files.",
                        "<i><strong>When possible, use buffer-size accessors:</strong></i> Some languages—such as Java—provide operators that can be used to retrieve the size of an array. Using these operators can help you avoid buffer overflow.",
                        "<i><strong>Use alternative data structures that reduce the risk of overflows:</strong></i>When possible, use vectors and iterators instead of arrays and integer-indexed loops. These tools will not eliminate the problem, but will greatly reduce the risk of buffer overflow.",
                        "<i><strong>Try to avoid allocating storage until you know how much you need:</strong></i> When possible, wait to allocate memory until after you know how much space you need. In some cases, this may mean allocating a new buffer instead of reusing an old one.",
                        "<i><strong>Send the size of the array along with the array:</strong></i> If you’re using an array as an argument to a function, be sure to send the size of the array to the function as well. This value can be used as an upper limit on array indices.",
                        "<i><strong>Avoid risky functions</strong></i> Some languages have a variety of library functions that may lead to buffer overflow vulnerabilities. If you are using any library functions for reading user data, copying data, or allocating/freeing blocks of data, understand the appropriate uses of these functions. In many cases, more secure versions of risky functions are available—use these instead.",
                        "<i><strong>Use your tools</strong></i> Many compilers provide warnings in cases of potential buffer overflows. Use high warning settings, and fix your code to avoid these warnings. Use static analysis tools to analyze your source coda or use dynamic analysis tools to examine and report on the state of your program while running.",
                        "<i><strong>Handle exceptions with care</strong></i> Checking for and responding to potential overflows in your code, instead of relying on the exception-handling mechanism, will make your code more robust and secure."
                    ],
                    "ordered": true
                },
                {
                    "type": "subheader",
                    "text": "Answer the following questions:"
                },
                {
                    "type": "question",
                    "id": "variable",
                    "prompt": "A variable used for an array index could be obtained from:",
                    "ignored": false,
                    "mode": "checkbox",
                    "choices": [
                        {
                            "id": "file",
                            "text": "A file",
                            "ans": true
                        },
                        {
                            "id": "network",
                            "text": "A network",
                            "ans": true
                        },
                        {
                            "id": "user input",
                            "text": "User input",
                            "ans": true
                        }
                    ]
                },
                {
                    "type": "question",
                    "id": "legal",
                    "prompt": "Given the following list array:<br><br><code> int scores[100];</code><br><br> Specify the legal range or bounds for an array index i:",
                    "ignored": false,
                    "mode": "radio",
                    "choices": [
                        {
                            "id": "1",
                            "text": "0 < i < 100"
                        },
                        {
                            "id": "2",
                            "text": "0 < i <= 100"
                        },
                        {
                            "id": "3",
                            "text": "0 <= i < 100"
                        },
                        {
                            "id": "4",
                            "text": "0 <= i <= 100"
                        }
                    ],
                    "answer": "3"
                }
            ]
        },
        {
            "header": "Laboratory Assignment",
            "units": [
                {
                    "type": "paragraph",
                    "text": "<strong>STEP 1:</strong> Type, compile and run the program below."
                },
                {
                    "type": "subheader",
                    "text": "Program 1:"
                },
                {
                    "type": "codeblock",
                    "code": "./labAssignment.cpp"
                },
                {
                    "type": "question",
                    "id": "LQ1",
                    "prompt": "List the potential buffer overflow overflows.",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "LQ2",
                    "prompt": "Provide example inputs that might cause buffer overflow problems.",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "LQ3",
                    "prompt": "What strategies might you use to remove potential buffer overflow vulnerabilities from this program? (hint: 1) Revise copyVals to return an array. 2) Modify getChars. 3) Modify getSubstring)",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "paragraph",
                    "text": "<strong>STEP 2:</strong> Revise the program to eliminate potential buffer overflow problems. You should be able to do this wihtout adding any exception handling code."
                },
                {
                    "type": "paragraph",
                    "text": "<strong>STEP 3:</strong> Program 2"
                },
                {
                    "type": "paragraph",
                    "text": "<strong>STEP 3.1:</strong> Write a function that will copy an arbitrary range of one array of buffers into another array. Your procedure will take seven arguments:"
                },
                {
                    "type": "list",
                    "items": [
                        "The source array of buffers",
                        "The length of the source array",
                        "A starting point in the source array",
                        "An ending point in the source array",
                        "The destination array of buffers – the array that you will be copying numbers to",
                        "The length of the destination array",
                        "An buffer indicating the index in the destination array where copying should start."
                    ],
                    "ordered": true
                },//////////////////////////////////////////////////////
                {
                    "type": "paragraph",
                    "text": "<strong>STEP 3.2:</strong> "
                },
                {
                    "type": "paragraph",
                    "text": "<strong>STEP 3.3:</strong> "
                }
            ]
        },
        {
            "header": " Security Checklist",
            "units": [
                {
                    "type": "subheader",
                    "text": "Complete the security checklist."
                },
                {
                    "type": "question",
                    "id": "SC1",
                    "prompt": "List places where the bounds or range checking should occur?",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "SC2",
                    "prompt": "For each input, what numbers will cause list index out of range errors?",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "paragraph",
                    "text": "<strong>STEP 1:</strong> Rewrite the above program to include the appropriate bounds checking."
                },
                {
                    "type": "paragraph",
                    "text": "<strong>STEP 2:</strong> Create the following python file:"
                },
                {
                    "type": "codeblock",
                    "code": "./scProgram.py"
                },
                {
                    "type": "paragraph",
                    "text": "<strong>STEP 3:</strong> Create the following temps.txt file (Make sure this file is in the same folder where the above python file is stored):<br><br><code>30.0 30.1 30.2 30.3 30.4 30.5 30.6 20.7 30.8 30.9 </code><br>"
                },
                {
                    "type": "paragraph",
                    "text": "<strong>STEP 4:</strong> Compile and run the program. It should list 10 temperatures as being read."
                },
                {
                    "type": "paragraph",
                    "text": "<strong>STEP 5:</strong>  Change temps.txt to the following: <br><br><code>30.0 30.1 30.2 30.3 30.4 30.5 30.6 20.7 30.8 30.9 31.0 31.2 </code><br>"
                },
                {
                    "type": "paragraph",
                    "text": "<strong>STEP 6:</strong> Compile and run the program."
                },
                {
                    "type": "question",
                    "id": "SC3",
                    "prompt": "What happended after compiling and running the program in step 6 and why?",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "paragraph",
                    "text": "<strong>STEP 7:</strong> Modify the program to fix the problem. DO NOT change the size of the array! Hint: Add a check to the loop."
                }
            ]
        },
        {
            "header": "Discussion Questions",
            "units": [
                {
                    "type": "question",
                    "id": "Dquestion1",
                    "prompt": "Describe the buffer overflow problem.",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "Dquestion2",
                    "prompt": "What happens if you exceed the size of an array in Python? Do you consider this robust behavior?",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "Dquestion3",
                    "prompt": "List three ways you could potentially overflow a buffer or exceed the size of an array in your program.",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "Dquestion4",
                    "prompt": "How could you prevent a buffer overflow from occurring in your program?",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "Dquestion5",
                    "prompt": "Give three real life examples of buffer overflow attacks (research on the web).",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "Dquestion6",
                    "prompt": "What can result from a buffer overflow?",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "Dquestion7",
                    "prompt": "Buffer overflows can be troublesome if they are used by attackers to run their own code. What sort of things might an attacker try to do if he or she were able to run any code they wanted on a computer?",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                }
            ]
        }
    ]
}