{
    "name": "Input Validation",
    "variant": "CS1 C++",
    "sections": [
        {
            "header": "Background",
            "units": [
                {
                    "type": "subheader",
                    "text": "Summary:"
                },
                {
                    "type": "paragraph",
                    "text": "Any program input--such as a user typing at a keyboard, a file or a network connection--can be the source of security vulnerabilities and disastrous bugs. All input should be treated as potentially dangerous."
                },
                {
                    "type": "subheader",
                    "text": "Description:"
                },
                {
                    "type": "paragraph",
                    "text": "Most software packages rely upon external input. Although information typed at a computer might be the most familiar, networks and external devices can also send data to a program. Generally, this data is of a specific type: for example, a user interface that requests a person’s name might be written to expect a series of alphabetic characters. If the correct type and form of data is provided, the program might work fine. However, if programs are not carefully written, attackers can construct inputs that can cause malicious code to be executed."
                },
                {
                    "type": "paragraph",
                    "text": "If the video does not work, try refreshing the page:"
                },
                {
                    "type": "paragraph",
                    "text": "<a href = https://www.youtube.com/watch?v=-8bDdrZhj_k>https://www.youtube.com/watch?v=-8bDdrZhj_k</a>"
                },
                {
                    "type": "paragraph",
                    "text": "<small><small>Video by Summer Lagambi, Haley McComas, and Abbey Baker.</small></small>"
                },
                {
                    "type": "subheader",
                    "text": "Risk - How Can It Happen?"
                },
                {
                    "type": "paragraph",
                    "text": "Any data that can enter your program from an external source can be a potential source of problems. If external data is not checked to verify that it has the right type of information, the right amount of information, and the right structure of information, it can cause problems. Any program that processes data from external sources without adequate validation can be susceptible to security vulnerabilities."
                },
                {
                    "type": "image",
                    "src": "http://cis1.towson.edu/~cssecinj/wp-content/uploads/fat_finger.jpg",
                    "alt": "Dominik Joswig",
                    "width": 406,
                    "height": 226,
                    "float": null
                },
                {
                    "type": "paragraph",
                    "text": "<small><small>Drawing used by permission of Dominik Joswig</small></small>"
                },
                {
                    "type": "subheader",
                    "text": "Examples of Occurence:"
                },
                {
                    "type": "list",
                    "items": [
                        "In December 2005, a Japanese securities trader made a $1 billion typing error, when he mistakenly sold 600,000 shares of stock at 1 yen each instead of selling one share for 600,000 yen. A few lines of code may have averted this error. Fat fingered typing costs a trader’s bosses £128m. <br><small><small><small><i>The Times Online</i>, December 09, 2005</small></small></small>",
                        "Web applications are highly vulnerable to input validation errors. Inputting the invalid entry \"!@#$%^&*()\" on a vulnerable e-commerce site may cause performance issues or denial of service on a vulnerable system or invalid passwords such as \"pwd’\" or \"1=1— \" may result in unauthorized access. <a href = http://www.processor.com/editorial/article.asp?article=articles%2Fp3112%2F32p12%2F32p12%2F32p12.asp&guid=&searchtype=&WordList=&bJumpTo=True>http://www.processor.com/editorial/article.asp?article=articles%2Fp3112%2F32p12%2F32p12%2F32p12.asp&guid=&searchtype=&WordList=&bJumpTo=True</a>",
                        "A Norwegian woman mistyped her account number on an internet banking system. Instead of typing her 11-digit account number, she accidentally typed an extra digit, for a total of 12 numbers. The system discarded the extra digit, and transferred $100,000 to the (incorrect) account. A simple dialog box informing her that she had typed too many digits would have helped avoid this expensive error.<br><small><small><small>Olsen, Kai. “The $100,000 Keying error” IEEE Computer, August 2008</small></small></small>"
                    ],
                    "ordered": false
                },
                {
                    "type": "subheader",
                    "text": "Answer the following questions:"
                },
                {
                    "type": "question",
                    "id": "inputPrograms",
                    "prompt": "The following are sources of input for programs:",
                    "ignored": false,
                    "mode": "checkbox",
                    "choices": [
                        {
                            "id": "Keyboard",
                            "text": "Keyboard",
                            "ans": true
                        },
                        {
                            "id": "Network",
                            "text": "Network",
                            "ans": true
                        },
                        {
                            "id": "File",
                            "text": "File",
                            "ans": true
                        }
                    ]
                },
                {
                    "type": "question",
                    "id": "evilInput",
                    "prompt": "\"Evil\" input can occur from an error made by the user:",
                    "ignored": false,
                    "mode": "radio",
                    "choices": [
                        {
                            "id": "true",
                            "text": "True"
                        },
                        {
                            "id": "false",
                            "text": "False"
                        }
                    ],
                    "answer": "true"
                }
            ]
        },
        {
            "header": "Code Responsibly",
            "units": [
                {
                    "type": "paragraph",
                    "text": "<strong><i>Check all input:</i></strong> Below is a partial list of some checks to include:"
                },
                {
                    "type": "list",
                    "items": [
                        "<strong>Type check:</strong> variables are checked to ensure they are the appropriate data type; for example, names should generally be alphabetic and age should be numeric.",
                        "<strong>Length check:</strong> variables are checked to ensure they are the appropriate length; for example, a US telephone number has 10 digits.",
                        "<strong>Range check:</strong> numbers are checked to ensure they are within a range of possible values; for example, the value for month should lie between 1 and 12.",
                        "<strong>Reasonable check:</strong> values are checked for their reasonableness; for example: (age > 16) && (age < 100)",
                        "<strong>Divide by Zero:</strong> variables are checked for values that might cause problems such as division by zero.",
                        "<strong>Format check:</strong> data are checked to ensure they are in a specified format (template); for example, dates have to be in the format DD/MM/YYYY."
                    ],
                    "ordered": false
                },
                {
                    "type": "paragraph",
                    "text": "<small>Input checking can be difficult. Checking a telephone number may require consideration of the many differing telephone formats used by countries around the world.</small>"
                },
                {
                    "type": "paragraph",
                    "text": "<strong><i>Recover appropriately:</i></strong> A robust program will respond to invalid input in a manner that is appropriate, correct, and secure. When your program runs across invalid input, it should recover as much as possible, and then repeat the request, or otherwise continue on. Arbitrary decisions such as truncating or otherwise reformatting data to “make it fit” should be avoided."
                },
                
                {
                    "type": "paragraph",
                    "text": "<small>The following function shows input validation to check range and/or reasonableness:</small>"
                },
                {
                    "type": "codeblock",
                    "code": "./codeResponsibly.cpp"
                },
                {
                    "type": "subheader",
                    "text": "Answer the following questions:"
                },
                {
                    "type": "question",
                    "id": "checkedForReasonableness",
                    "prompt": "Which of the following inputs should be checked for reasonableness?",
                    "ignored": false,
                    "mode": "checkbox",
                    "choices": [
                        {
                            "id": "age",
                            "text": "age",
                            "ans": true
                        },
                        {
                            "id": "firstName",
                            "text": "first name",
                            "ans": false
                        },
                        {
                            "id": "city",
                            "text": "city",
                            "ans": false
                        },
                        {
                            "id": "itemPrice",
                            "text": "item price",
                            "ans": true
                        }
                    ]
                },
                {
                    "type": "question",
                    "id": "template",
                    "prompt": "Which of the following inputs would require a specific template or format to be appropriate?",
                    "ignored": false,
                    "mode": "checkbox",
                    "choices": [
                        {
                            "id": "ssn",
                            "text": "social security number",
                            "ans": true
                        },
                        {
                            "id": "nationalDebt",
                            "text": "national debt",
                            "ans": false
                        },
                        {
                            "id": "telephoneNumber",
                            "text": "telephone number",
                            "ans": true
                        },
                        {
                            "id": "bd",
                            "text": "birth date",
                            "ans": true
                        }
                    ]
                }
            ]
        },
        {
            "header": "Laboratory Assignment",
            "units": [
                {
                    "type": "paragraph",
                    "text": "<strong>STEP 1:</strong> Write an input validation loop that asks the user to enter a body weight."
                },
                {
                    "type": "paragraph",
                    "text": "<strong>STEP 2:</strong>Write a program to calculate BMI = Weight (lbs)/Height (in)<sup>2</sup> x 703."
                },
                {
                    "type": "paragraph",
                    "text": "<strong>STEP 3:</strong>Complete the below security checklist for the program developed in step 2."
                },
                {
                    "type": "subheader",
                    "text": "Security Checklist"
                },
                {
                    "type": "paragraph",
                    "text": "Check each line of code. Mark with a V each variable that is input."
                },
                {
                    "type": "question",
                    "id": "securityChecklist",
                    "prompt": "For each V, which of the following is applicable?",
                    "ignored": false,
                    "mode": "checkbox",
                    "choices": [
                        {
                            "id": "length",
                            "text": "Check length?",
                            "ans": false
                        },
                        {
                            "id": "range",
                            "text": "Check range (reasonableness)?",
                            "ans": true
                        },
                        {
                            "id": "format",
                            "text": "Check format?",
                            "ans": false
                        },
                        {
                            "id": "type",
                            "text": "Check type?",
                            "ans": true
                        }
                    ]
                },
                {
                    "type": "paragraph",
                    "text": "<small>Highlighted areas indicate vulnerabilities!<small>"
                },
                {
                    "type": "paragraph",
                    "text": "<strong>STEP 4:</strong> Add any additional input validation to your program that completing the checklist identified."
                },
                {
                    "type": "paragraph",
                    "text": "<strong>STEP 5:</strong> For submission, copy and paste the program and completed security checklist on word document and submit it to your instructor."
                }
            ]
        },
        {
            "header": "Discussion Questions",
            "units": [
                {
                    "type": "image",
                    "src": "http://cis1.towson.edu/~cssecinj/wp-content/uploads/fat_finger.jpg",
                    "alt": "Dominik Joswig",
                    "width": 406,
                    "height": 226,
                    "float": null
                },
                {
                    "type": "question",
                    "id": "question1",
                    "prompt": "Explain the above cartoon. What is a \"fat finger?\"",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "question2",
                    "prompt": "List ways to make your program \"fat finger friendly.\"",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "question3",
                    "prompt": "Filenames are particularly vulnerable to security vulnerabilities. Research to find out why.",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "question4",
                    "prompt": "Another important security strategy is \"defense in depth\". Explain what you think this means. How could this relate to input validation?",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "question5",
                    "prompt": "Refer back to the lab on integer errors. Can improper input validation lead to integer errors?",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "question6",
                    "prompt": "Checking for division by zero is pretty straightforward. Checking for a possible integer overflow as a result of an operation can be difficult. Why?",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "question7",
                    "prompt": "Accepting known good values is known as whitelisting. Rejecting bad values is known as blacklisting. Write the loop construct for whitelisting a body temperature. Write the loop construct for blacklisting a body temperature. Why is whitelisting much stronger?",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                }
            ]
        }
    ]
}