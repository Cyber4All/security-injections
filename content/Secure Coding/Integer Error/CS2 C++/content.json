{
    "name": "Integer Error",
    "variant": "CS2 C++",
    "grant": "The Security Injections@Towson, SPLASH@Towson, and Cyber4All projects are supported by the National Science Foundation under grants NSF DUE-1241738, NSF DUE -0817267, NSF DGE-1516113, NSF DGE-1516113, NSF DGE-1241649, the GenCyber program, and the Intel Corporation.",
	"license": {
		"name": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License",
		"link": "http://creativecommons.org/licenses/by-nc-sa/3.0/"
	},
    "sections": [
        {
            "header": "Background",
            "units": [
                {
                    "type": "subheader",
                    "text": "Summary:"
                },
                {
                    "type": "paragraph",
                    "text": "Integer values that are too large or small may exceed the range of their data type, which can cause unpredictable behavior. This can reduce the robustness of your code and invite security vulnerabilities."
                },
                {
                    "type": "image",
                    "src": "http://imgs.xkcd.com/comics/cant_sleep.png",
                    "alt": "*XKCD Comic*",
                    "width": 740,
                    "height": 244,
                    "float": null
                },
                {
                    "type": "attribution",
                    "copyright": "XKCD",
                    "date": "2017",
                    "link": "http://imgs.xkcd.com/comics/cant_sleep.png"
                },
                {
                    "type": "subheader",
                    "text": "Description:"
                },
                {
                    "type": "paragraph",
                    "text": "Declaring a variable as type <code>int</code> allocates a fixed amount of space in memory. Most languages include several integer types, including <code>short</code>, <code>int</code>, <code>long</code>, etc., to allow for various storage capacities. The amount of space allocated limits the range of values that can be stored. For example, a 32-bit signed <code>int</code> variable can hold values from -2<sup>31</sup> (-2,147,413,648 bits) through 2<sup>31</sup>-1 (2,147,413,647 bits)."
                },
                {
                    "type": "paragraph",
                    "text": "Operations that respond with values outside of the given range can give way to a variety of problems for data types that hold integer values, like <code>int</code>, <code>short</code>, and <code>long</code>."
                },
                {
                    "type": "list",
                    "items": [
                        "<i>Integer Overflow</i>: Mathematical operations can cause integer values to fall below the minimum or above the maximum capacity their data type can allow. For instance, if <code>i = INT_MAX</code>, the increment operator <code>i++</code> will cause an overflow, and the resulting value will be the smallest possible integer value <code>INT_MIN</code>. Addition, subtraction, multiplication, and even division can cause an overflow instance.",
                        "<i>Sign Errors</i>: C++ has both signed and unsigned integer types. Signed variables can go from a large negative value to a large positive value, while unsigned variables can only store non-negative values. Problems can arise when converting from a signed to an unsigned variable. For example, if you have a negative signed value <code>short i = -32767</code>, and you were to assign that value to an unsigned variable <code>unsigned short u = i</code>, the internal representation of the number is unchanged, but the resulting value is interpreted as being unsigned, leading to an undesired result <code>u = 32769</code>.",
                        "<i>Truncation</i>: If an integer is converted from a larger type to a smaller type where the value goes out of range (say, from a <code>long</code> to a <code>short</code>), the value will be truncated; the high-order bits that do not fit into the smaller type will simply be thrown out. For example, if you have a <code>long</code> variable with a value greater than the largest value that can be stored in a <code>short</code> (<code>long l = 32800</code>), assigning the <code>long</code> to a <code>short</code> (<code>short s = (short)l</code>) will cause a truncation error <code>s = -32736</code>."
                    ],
                    "ordered": false
                },
                {
                    "type": "subheader",
                    "text": "Risk – How Can It Happen?"
                },
                {
                    "type": "paragraph",
                    "text": "Integer variables are often used to indicate the number of items that must be stored in an array or other fixed-size buffer. If a variable with an overflow is used for this purpose, the resulting buffer might be too small for the data that will be copied into it. This can cause your program to crash, lead to incorrect behavior, or open security vulnerabilities."
                },
                {
					"type": "image",
					"src": "http://4.bp.blogspot.com/-58kvuzDhzus/TWgnjsyE-7I/AAAAAAAAAG4/0HijRxwS8Ew/s1600/group+reaches+s.png",
					"alt": "*Facebook group image*",
					"width": 378,
					"height": 275,
					"float": null
				},
                {
					"type": "attribution",
					"copyright": "Facebook",
					"date": "2017",
					"link": "http://4.bp.blogspot.com/-58kvuzDhzus/TWgnjsyE-7I/AAAAAAAAAG4/0HijRxwS8Ew/s1600/group+reaches+s.png"
				},
                {
                    "type": "subheader",
                    "text": "Examples of Occurence:"
                },
                {
                    "type": "list",
                    "items": [
                        "There is a Facebook group called 'If this group reaches 4,294,967,296 it might cause an integer overflow.' This value is 1 more than the largest number that can fit in a 32-bit unsigned integer. If the number of members of the group exceeded this number, it might cause an overflow. Whether it will cause an overflow or not depends upon how Facebook is implemented and which language is used – they might use data types that can hold larger numbers. In any case, the chances of an overflow seem remote, as roughly 2/3 of the people on Earth would be required to reach the goal of more than 4 billion members.",
                        "On December 25, 2004, Comair airlines was forced to ground 1,100 flights after its flight crew scheduling software crashed. The software used a 16-bit integer (max 32,767) to store the number of crew changes. The bad weather that month lead to a spike in crew changes, which caused an integer overflow.",
                        "Many Unix operating systems store time values in 32-bit signed (positive or negative) integers, counting the number of seconds since midnight on January 1, 1970. On Tuesday, January 19, 2038, this value will overflow, becoming a negative number. Although the impact of this problem in 2038 is not yet known, there are concerns that some software projects – including tools for mortgage payment and retirement fund distribution – might face problems long before then."
                    ],
                    "ordered": true
                },
                {
                    "type": "paragraph",
                    "text": "<small><small><small>Source: Year 2038 Problem <a href = http://en.wikipedia.org/wiki/Year_2038_problem> http://en.wikipedia.org/wiki/Year_2038_problem</a>.</small></small></small>"
                },
                {
                    "type": "question",
                    "id": "memory",
                    "prompt": "Declaring a variable as type <code>int</code>:",
                    "ignored": false,
                    "mode": "radio",
                    "choices": [
                        {
                            "id": "infinite",
                            "text": "Allocates an infinite amount of storage"
                        },
                        {
                            "id": "fixed",
                            "text": "Allocates a fixed amount of storage"
                        }
                    ],
                    "answer": "fixed"
                },
                {
                    "type": "question",
                    "id": "effect",
                    "prompt": "An integer error in C++ causes:",
                    "ignored": false,
                    "mode": "radio",
                    "choices": [
                        {
                            "id": "syntax",
                            "text": "A syntax error"
                        },
                        {
                            "id": "correction",
                            "text": "The program to correct itself"
                        },
                        {
                            "id": "unexpected",
                            "text": "Unexpected behavior"
                        }
                    ],
                    "answer": "unexpected"
                }
            ]
        },
        {
            "header": "Code Responsibly",
            "units": [
                {
                    "type": "subheader",
                    "text": "How Can I Avoid an Integer Error?"
                },
                {
                    "type": "list",
                    "items": [
                        "<i>Know your limits</i>: Familiarize yourself with the range of each data type. Since the sizes of C++ data types are compiler and machine dependent, it is a good idea to run this sample program to see the limits of each variable type.",
                        "<i>Choose your data types wisely</i>: Many programming languages contain a variety of data types that can store integer values. If you are concerned about the integer values you will be using, learn about the options available in the language you are using, and choose integer types large enough to hold those values. One useful strategy for reducing integer errors is to declare any variable that is used to represent the size of an object, including integer values used as sizes, indices, loop counters, and lengths, as <code>size_t</code>. The <code>size_t</code> type is the unsigned integer type. If your variable will hold only positive values, declare as an <code>unsigned int</code>. If there's any doubt as to whether the variable will have values that are too large for a <code>short</code>, use an <code>int</code>. If an <code>int</code> might be too small, use a <code>long</code>.",
                        "<i>Validate your input</i>: Check your input for range and reasonableness before conducting operations (more on this later).",
                        "<i>Check for possible overflows</i>: Always check the results of arithmetic operations or parsing strings to integers to be proactive against integer errors. The result of multiplying two positive integers should be at least as big as both of those integers. If you find a result that overflows, you can take appropriate action before the result is used. Imagine you were adding two positive integers. Instead of writing:<br><br><code>int sum = someInteger + someOtherInteger;</code><br><br>You might try this instead:<br><br><code>if (((someInteger >0) && (someOtherInteger >0) && (some Integer> (INT_MAX-someOtherInteger))) ||<br>&nbsp&nbsp&nbsp&nbsp((someInteger <0) && (someOtherInteger <0) && (someInteger < (INT_MIN-someOtherInteger))))<br> &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp... throw an exception to handle the problem<br>else   //  no exception, so no overflow.<br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp  int sum = someInteger+someOtherInteger;<br></code><br>This won't completely solve the problem – you'll need to recover from the exception. As these tests can become fairly complex[1], you should be careful when relying upon manual checks for preventing integer overflow.",
                        "<i>Use compiler checks</i>: Many compilers include options that can be used to check for possible integer overflows. Read the documentation for your compiler and use these functions whenever possible.",
                        "<i>Use libraries that will help you avoid errors</i>: C++ programmers might use the SafeInt class, which tests for errors before conducting operations. C programmers can use IntegerLib."
                    ],
                    "ordered": true
                },
                {
                    "type": "paragraph",
                    "text": "<small><small><small>[1]See <a href = https://www.securecoding.cert.org/confluence/display/cplusplus/VOID+INT32-CPP.+Ensure+that+operations+on+signed+integers+do+not+result+in+overflow >https://www.securecoding.cert.org/confluence/display/cplusplus/VOID+INT32-CPP.+Ensure+that+operations+on+signed+integers+do+not+result+in+overflow</a> for examples of solutions for other operations.</small></small></small>"
                },
                {
                    "type": "question",
                    "id": "avoid",
                    "prompt": "How can you avoid integer error in your program?",
                    "ignored": false,
                    "mode": "checkbox",
                    "choices": [
                        {
                            "id": "bounds",
                            "text": "Know the smallest and largest possible values for each data type in your chosen programming language.",
                            "ans": true
                        },
                        {
                            "id": "float",
                            "text": "Always pick float or double as the data types for numbers.",
                            "ans": false
                        },
                        {
                            "id": "check",
                            "text": "Check your input for reasonable values before conducting mathematical operations.",
                            "ans": true
                        }
                    ]
                }
            ]
        },
        {
            "header": "Laboratory Assignment",
            "units": [
                {
                    "type": "paragraph",
                    "text": "<strong>STEP 1:</strong> Type Program 1 into a C++ compiler. Compile and run."
                },
                {
                    "type": "subheader",
                    "text": "Program 1"
                },
                {
                    "type": "codeblock",
                    "code": "./program1.cpp"
                },
                {
                    "type": "question",
                    "id": "populationGrowth",
                    "prompt": "What happens if you start with a population of 10,000 and a 10% growth rate?",
                    "ignored": false,
                    "mode": "radio",
                    "choices": [
                        {
                            "id": "1",
                            "text": "Invalid output due to integer overflow"
                        },
                        {
                            "id": "2",
                            "text": "The program displays yearly population for the next 10 years, with final population as 25,934"
                        },
                        {
                            "id": "3",
                            "text": "The program crashes"
                        }
                    ],
                    "answer": "2"
                },
                {
                    "type": "question",
                    "id": "whatHappens",
                    "prompt": "What happens if you start with a population of 20,000 and a 10% growth rate?",
                    "ignored": false,
                    "mode": "radio",
                    "choices": [
                        {
                            "id": "1",
                            "text": "Invalid output due to integer overflow"
                        },
                        {
                            "id": "2",
                            "text": "The program displays yearly population for the next 10 years, with final population as 25,934"
                        },
                        {
                            "id": "3",
                            "text": "The program crashes"
                        }
                    ],
                    "answer": "1"
                },
                {
                    "type": "question",
                    "id": "AtWhatGrowth",
                    "prompt": "At what growth rate does the population of 20,000 start overflowing?",
                    "ignored": false,
                    "mode": "radio",
                    "choices": [
                        {
                            "id": "1",
                            "text": "5 percent"
                        },
                        {
                            "id": "2",
                            "text": "7 percent"
                        },
                        {
                            "id": "3",
                            "text": "6 percent"
                        },
                        {
                            "id": "4",
                            "text": "10 percent"
                        }
                    ],
                    "answer": "3"
                },
                {
                    "type": "question",
                    "id": "doesAShort",
                    "prompt": "Does a <code>short</code> seem like a good choice for this program?",
                    "ignored": false,
                    "mode": "radio",
                    "choices": [
                        {
                            "id": "yes",
                            "text": "Yes, since the population grows at a single-digit rate"
                        },
                        {
                            "id": "no",
                            "text": "No, since the population of a country can go up to 1.3 billion"
                        }
                    ],
                    "answer": "no"
                },
                {
                    "type": "paragraph",
                    "text": "<strong>STEP 2:</strong> Write a corrected version of this program that will calculate population growth for any university or country. Turn in the corrected program to your instructor."
                }
            ]
        },
        {
            "header": "Security Checklist",
            "units": [
                {
                    "type": "checklist",
                    "id": "Pgm1CL",
                    "list": [
                        {
                            "id": "var",
                            "header": "Check each line of code:",
                            "items": [
                                {
                                    "id": "var",
                                    "text": "Click each declaration of an integer variable.",
                                    "ans": true,
                                    "js": true
                                }
                            ]
                        },
                        {
                            "id": "vuln",
                            "header": "For each variable:",
                            "items": [
                                {
                                    "id": "input",
                                    "text": "Click all input operations that assign values to the variable.",
                                    "ans": true,
                                    "js": true
                                },
                                {
                                    "id": "math",
                                    "text": "Click all mathematical operations involving the variable.",
                                    "ans": true,
                                    "js": true
                                },
                                {
                                    "id": "assign",
                                    "text": "Click all assignments made to the variable.",
                                    "ans": true,
                                    "js": true
                                }
                            ]
                        }
                    ],
                    "code": "./securityChecklist.html",
                    "javascript": "./checklist.js"
                },
                {
                    "type": "paragraph",
                    "text": "Highlighted areas indicate vulnerabilities."
                }
            ]
        },
        {
            "header": "Discussion Questions",
            "units": [
                {
                    "type": "image",
                    "src": "http://4.bp.blogspot.com/-58kvuzDhzus/TWgnjsyE-7I/AAAAAAAAAG4/0HijRxwS8Ew/s1600/group+reaches+s.png",
                    "alt": "*Facebook group image*",
                    "width": 175,
                    "height": 120,
                    "float": null
                },
                {
                    "type": "question",
                    "id": "discussionqQestion1",
                    "prompt": "Look at the image above and explain the concept behind this group. Do you think it is likely that the group might cause an overflow?",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "DiscussionQuestion2",
                    "prompt": "What dangers do integer overflows present?",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "DiscussionQuestion3",
                    "prompt": "Discuss the implications of positive integer errors for array indices.",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "DiscussionQuestion4",
                    "prompt": "Explore how division might cause integer overflows (hint: you should look at sources on the web for the answer).",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "DiscussionQuestion5",
                    "prompt": "Write a version of Program 1 that still uses <code>short</code> variables to store results and uses appropriate error and result handling to respond to errors. You may use the technique of storing values in temporary variables before assigning them to the <code>short</code> variables.",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "qDiscussionQuestion6",
                    "prompt": "Does a <code>short</code> seem like a good choice for this program? Why or why not?",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                }
            ]
        }
    ]
}
