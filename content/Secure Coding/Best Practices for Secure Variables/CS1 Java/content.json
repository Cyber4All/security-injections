{
    "name": "Best Practices for Secure Variables",
    "variant": "CS1 Java",
    "grant": "The Security Injections@Towson, SPLASH@Towson, and Cyber4All projects are supported by the National Science Foundation under grants NSF DUE-1241738, NSF DUE -0817267, NSF DGE-1516113, NSF DGE-1516113, NSF DGE-1241649, the GenCyber program, and the Intel Corporation.",
	"license": {
		"name": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License",
		"link": "http://creativecommons.org/licenses/by-nc-sa/3.0/"
	},
    "sections": [
        {
            "header": "Background",
            "units": [
                {
                    "type": "subheader",
                    "text": "Summary:"
                },
                {
                    "type": "paragraph",
                    "text": "During the last few years, the number of vulnerabilities being discovered in applications is far greater than the number of vulnerabilities discovered in operating systems. There are all sorts of programming ideas and even template type code available to make computer programs more secure. The purpose of this lab is to have security begin at the design stage. It is much easier, and smarter, to create secure code from design than to try to secure it during coding."
                },
                {
                    "type": "image",
                    "src": "https://s3.amazonaws.com/security-injections.clark.center/assets/Computer_Literacy-Cryptography/VulnerabilitiesTriangle.png",
                    "alt": "Vulerabilities inverted triangle",
                    "width": 500,
                    "height": 500,
                    "float": null
                },
                {
                    "type": "subheader",
                    "text": "Description:"
                },
                {
                    "type": "paragraph",
                    "text": "The cost of fixing system vulnerabilities, and the risk associated with vulnerabilities after system deployment, are high for both developers and end users. Steps to reduce the cost of system maintenance and the risk of security vulnerabilities need to be adopted by software development organizations. While there are a number of best practices available to address the issue of software security vulnerabilities, these practices are often difficult to reuse due to the implementation-specific nature of the best practices. Many current best security practices focus on implementation and deployment issues and do not address security flaws introduced in earlier phases of the development process."
                },
                {
                    "type": "subheader",
                    "text": "Risk- How Can It Happen?"
                },
                {
                    "type": "paragraph",
                    "text": "Application software that does not properly check the size of user input fails to filter out unneeded and potentially malicious character sequences, or does not initialize/clear variables properly, could be vulnerable to remote compromise. Attackers can inject specific exploits, including buffer overflows, SQL injection attacks, and cross-site scripting code, to gain control over vulnerable machines."
                },
                {
                    "type": "subheader",
                    "text": "Example of Occurence:"
                },
                {
                    "type": "paragraph",
                    "text": "In a 2008 <a href = https://abcnews.go.com/Technology/story?id=7098329&page=1>SQL injection attack</a>, more than 1 million web servers were exploited and turned 25 into infection engines for site visitors. During that attack, trusted websites from state governments and other organizations were compromised by attackers and used to infect every browser that accessed those websites. Many more web and non-web application vulnerabilities are discovered on a regular basis."
                }
            ]
        },
        {
            "header": "Code Responsibly",
            "units": [
                {
                    "type": "subheader",
                    "text": "How Can I Avoid Application Attacks Via Variables?"
                },
                {
                    "type": "list",
                    "items": [
                        "Declare your variables all on different lines. For example, we all know the following is acceptable and easy:<br><br><code>int a, b, c, d;</code><br><br>but:<br><br><code>int a;<br>int b;<br>int c;<br>int d;</code><br><br> is more secure.",
                        "\"Global\" variables (those declared outside of any method, but inside of main) are easy to design and define, but they are \"alive\" during the entire programâ€™s execution, making them susceptible to attack. Scope minimization improves code readability by connecting the declaration and actual use of a variable, and improves maintainability by making unused variables more easily detected and removed. Therefore, these types of variables should be avoided.",
                        "Constants should be declared as \"static final\" and denoted with UPPERCASE CHARACTERS. The <code>static</code> modifier says that the constant is a class variable (the closest we come to a global variable in JAVA). The <code>final</code> modifier tells the program that this variable cannot be changed; therefore, not even malware can change it. These types of variables are usually declared private as well.",
                        "Reuse of identifier names in subscopes leads to obscuration or shadowing. The identifiers in the current scope render those defined elsewhere inaccessible; such ambiguity burdens code maintainers, especially when code requires access to both the original named entity and the inaccessible one. The problem is aggravated when the reused name is defined in a different package. A simple name may occur in contexts where it may potentially be interpreted as the name of a variable, a type, or a package. No identifier should obscure or shadow another identifier in a containing scope. For instance, a local variable should not reuse the name of a class field or method, or the class name or package name. Similarly, an inner class name should not reuse the name of an outer class or package."
                    ],
                    "ordered": true
                }
            ]
        },
        {
            "header": "Lab Assignment",
            "units": [
                {
                    "type": "subheader",
                    "text": "Program 1"
                },
                {
        					"type": "paragraph",
        					"text": "Type this out into your code editor:"
        				},
                {
                    "type": "codeblock",
                    "code": "./securityChecklist.html"
                }

            ]
        },
        {
            "header": "Security Checklist",
            "units": [
              {
      					"type": "paragraph",
      					"text": "On your own, complete the following checklist:"
      				},
              {
      					"type": "checklist",
      					"id": "Pgm1CL",
      					"list": [
      						{
      							"id": "cl",
      							"header": "Check each line of your code and mark with comments:",
      							"items": [
      								{
      									"id": "var",
      									"text": "Make a comment next to any variable which may be vulnerable.",
      									"ans": true,
      									"js": false
      								},
      								{
      									"id": "input",
      									"text": "Mark with a V multiple variable declarations per line",
      									"ans": true,
      									"js": false
      								},
      								{
      									"id": "math",
      									"text": "Make a comment next to each constant.",
      									"ans": true,
      									"js": false
      								},
                      {
      									"id": "input",
      									"text": "Mark with a V any variable that is shadowed.",
      									"ans": true,
      									"js": false
      								},
      								{
      									"id": "assign",
      									"text": "Mark with a V any variable whose scope is not minimised.",
      									"ans": true,
      									"js": false
      								}
      							]
      						}
      					],
      					"code": "",
      					"javascript": ""
      				},
      				{
      					"type": "paragraph",
      					"text": "Comments marked with 'V' indicate vulnerabilities in the code."
      				}

            ]
        },
        {
            "header": "Discussion Questions",
            "units": [
                {
                    "type": "question",
                    "id": "dq1",
                    "prompt": "What is the most vulnerable area of an information system? Explain your answer using the information you read in the Background section.",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "dq2",
                    "prompt": "What happens when a class \"global\" variable is declared in terms of its time in RAM? Explain.",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "dq3",
                    "prompt": "What is the purpose of a constant variable?",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "dq4",
                    "prompt": "What is the rule for using the same names for inner classes and outer classes?",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                }
            ]
        }
    ]
}
