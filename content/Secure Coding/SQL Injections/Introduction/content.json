{
    "name": "SQL Injections",
    "variant": "Introduction",
    "grant": "The Security Injections@Towson, SPLASH@Towson, and Cyber4All projects are supported by the National Science Foundation under grants NSF DUE-1241738, NSF DUE -0817267, NSF DGE-1516113, NSF DGE-1516113, NSF DGE-1241649, the GenCyber program, and the Intel Corporation.",
	"license": {
		"name": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License",
		"link": "http://creativecommons.org/licenses/by-nc-sa/3.0/"
	},
    "sections": [
        {
            "header": "Background",
            "units": [
                {
                    "type": "image",
                    "src": "https://cisserv1.towson.edu/~cssecinj/wp-content/uploads/sqlInjections1.JPG",
                    "alt": "SQL injection",
                    "width": 279,
                    "height": 136,
                    "float": null
                },
                {
                    "type": "subheader",
                    "text": "Summary:"
                },
                {
                    "type": "paragraph",
                    "text": "An <strong>SQL injection</strong> is an attack technique that exploits a security vulnerability in the database layer of an application. Hackers use injections to obtain unauthorized access to the underlying data, structure, and Database Management System (DBMS). It is one of the most common web-application threats."
                },
                {
                    "type": "subheader",
                    "text": "Description:"
                },
                {
                    "type": "paragraph",
                    "text": "A <strong>database</strong> is the heart of most web-applications and is used to store information that the application needs, including credit card information, customer demographics, customer orders, client preferences, etc. Consequently, databases are attractive and lucrative targets for hackers. SQL Injections happen when a program accepts user input that is directly placed into an SQL Statement and fails to properly validate and filter out dangerous characters. Attackers will alter SQL statements passed to the database as parameters, steal data from your database, and possible modify or delete data."
                },
                {
                    "type": "paragraph",
                    "text": "A database can be vulnerable to SQL injections when user input is incorrectly filtered for string literal escape characters embedded in SQL statements, or when user input is not strongly typed. SQL injection attacks are also known as SQL insertion attacks."
                },
                {
                    "type": "paragraph",
                    "text": "Injection vulnerabilities -- such as SQL, LDAP, HTTP header injection and OS command injection -- have been ranked number one the Open Web Application Security Project (OWASP) Top 10 Web Application Vulnerabilities 2022 list, and third on the Common Weakness Enumeration (CWE) Top 25 Most Dangerous Software Weaknesses 2011 list."
                },
                {
                    "type": "image",
                    "src": "https://cisserv1.towson.edu/~cssecinj/wp-content/uploads/sqlInjections2.JPG",
                    "alt": "*SQL Injection*",
                    "width": 486,
                    "height": 365,
                    "float": null
                },
                {
                    "type": "subheader",
                    "text": "Risk - How Can It Happen?"
                },
                {
                    "type": "paragraph",
                    "text": "SQL injection attacks occur when a web application fails to validate values received from a web form, cookie, input parameter, etc. before passing them to SQL queries that will be executed on a database server. This will allow an attacker to manipulate the input so the data is interpreted as code, rather than as data."
                },
                {
                    "type": "paragraph",
                    "text": "SQL injection attack risk is very high and the consequences are severe. A successful attack can bypass authentication and authorization to gain full control of the database, steal sensitive data, change users’ passwords, retrieve users’ credential information, add non-existent accounts, drop tables, make illegal financial transactions, and destroy the existing database. The following table depicts several SQL injection examples."
                },
                {
                    "type": "table",
                    "headers": [
                        "Types of Threat",
                        "SQL Injection Examples"
                    ],
                    "cells": [
                        {
                            "first": "Spoofing",
                            "second": "Retrieve and use another user’s credentials <br> Modify author value for messages"
                        },
                        {
                            "first": "Tampering",
                            "second": "Modify product stock informations <br> Change any other data in the database"
                        },
                        {
                            "first": "Repudiation",
                            "second": "Delete transaction records <br> Delete database event logs"
                        },
                        {
                            "first": "Information disclosure",
                            "second": "Obtain saved credit card numbers <br> Gain insight into internal design of app"
                        },
                        {
                            "first": "Denial of service",
                            "second": "Run resource-intensive SQL queries <br> Kill sqlservr.exe process"
                        },
                        {
                            "first": "Elevation of privelege",
                            "second": "Retrieve and use administrator credentials <br> Run shell commands"
                        }
                    ]
                },
                {
                    "type": "subheader",
                    "text": "Example of Occurence:"
                },
                {
                    "type": "paragraph",
                    "text": "In 2011, the hacker group LulzSec used Security Injection attacks to make databases spit out user names and passwords, including one website associated with F.B.I.’s InfraGard program, SonyPictures, and NATO’s online bookstore. They also defaced the PBS website."
                },
                {
                    "type": "paragraph",
                    "text": "<small>Source: <a href = http://www.pcworld.com/article/231303/lulzsec_anonymous_hacks_were_avoidable_report_says.html> http://www.pcworld.com/article/231303/lulzsec_anonymous_hacks_were_avoidable_report_says.html</a></small>"
                },
                {
                    "type": "subheader",
                    "text": "Examples:"
                },
                {
                    "type": "paragraph",
                    "text": "A dynamic SQL statement is constructed during execution time. Consider the following example written in .NET where the input is provided by the user."
                },
                {
                    "type": "paragraph",
                    "text": "<code>Query= \"SELECT * FROM  users WHERE username  =  ' \" +request.getParameter(\"input\")+ \" ' \" ;</code>"
                },
                {
                    "type": "paragraph",
                    "text": "Below is the statement that this code builds:"
                },
                {
                    "type": "paragraph",
                    "text": "<code>SELECT * FROM  users WHERE username  = ‘input’</code>"
                },
                {
                    "type": "subheader",
                    "text": "SQL Manipulation Attacks:"
                },
                {
                    "type": "paragraph",
                    "text": "The most common SQL injection is SQL manipulation, where the attacker attempts to modify an existing SQL query statement and insert the exploited statement into the database."
                },
                {
                    "type": "codeblock",
                    "code": "./sql1.html"
                },
                {
                    "type": "paragraph",
                    "text": "<br>What if the user enters:"
                },
                {
                    "type": "codeblock",
                    "code": "./userEnters.html"
                },
                {
                    "type": "paragraph",
                    "text": "Since 1 = 1 is always true, the query will succeed and the attacker can bypass authentication. Similar attacks can be conducted in numeric fields where we exclude quotes."
                },
                {
                    "type": "paragraph",
                    "text": "Another variation of SQL manipulation attack is to insert two consecutive dashes (–) or # in MySQL, which comments out anything after it."
                },
                {
                    "type": "codeblock",
                    "code": "./sql2.html"
                },
                {
                    "type": "subheader",
                    "text": "Code Injection Attacks:"
                },
                {
                    "type": "paragraph",
                    "text": "Another type of SQL injection attack, called code injection attack, is done by appending SQL statements or executable commands right after a vulnerable SQL statement."
                },
                {
                    "type": "codeblock",
                    "code": "./code1.html"
                },
                {
                    "type": "paragraph",
                    "text": "Or we can create a backdoor to the database by inserting a new record in the user table, which would allow a hacker to access the database legally."
                }
            ]
        },
        {
            "comment": "left off here"
        },
        {
            "header": "Execute Lab Assignment",
            "units": [
                {
                    "type": "subheader",
                    "text": "Demo:"
                },
                {
                    "type": "paragraph",
                    "text": "OWASP WebGoat is a great web security teaching tool and a deliberately insecure web application. For this assignment, you need to install WebGoat 5.2,"
                },
                {
                    "type": "paragraph",
                    "text": "<a href = http://www.owasp.org/index.php/Category:OWASP_WebGoat_Project> http://www.owasp.org/index.php/Category:OWASP_WebGoat_Project </a> OR <a href =  http://code.google.com/p/webgoat/downloads/detail?name=readme-5.2.txt&can=2&q=>  http://code.google.com/p/webgoat/downloads/detail?name=readme-5.2.txt&can=2&q=</a>"
                },
                {
                    "type": "paragraph",
                    "text": "Consult the WebGoat user and Install Guide available from the first WebGoat link above for installation instructions. You may install it on the operating system of your choice. After you unpack WebGoat, the readme.txt file will help get you started and access WebGoat through your web browser. Make sure you take your computer off the Internet before using WebGoat."
                },
                {
                    "type": "paragraph",
                    "text": "WebGoat consists of a variety of lessons. For this assignment please complete the following lessons:"
                },
                {
                    "type": "list",
                    "items": [
                        "Numeric SQL Injection",
                        "String SQL Injection",
                        "LAB: SQL Injection"
                    ],
                    "ordered": true
                },
                {
                    "type": "paragraph",
                    "text": "You also need to install WebScarab, which is an intercepting proxy."
                },
                {
                    "type": "paragraph",
                    "text": "<a href = https://wiki.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project> https://wiki.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project</a>"
                }
            ]
        },
        {
            "header": "Discussion Questions",
            "units": [
                {
                    "type": "question",
                    "id": "dq1",
                    "prompt": "What are some examples of web applications that connect to a database server to access data?",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "dq2",
                    "prompt": "What are the possible impacts of an SQL injection attack?",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                },
                {
                    "type": "question",
                    "id": "dq3",
                    "prompt": "What is the main reason why SQL injection is a vulnerability?",
                    "ignored": true,
                    "mode": "textarea",
                    "pattern": "null"
                }
            ]
        }
    ]
}